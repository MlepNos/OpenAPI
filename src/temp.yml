openapi: '3.0.2'
info:
  title: API Title
  version: '1.0'
  description: Sepcification for openAPI
  termsOfService: http://example.com/terms/
servers:
  - url: https://api.server.test/v1
    description: Test Server
  - url: https://api.server.prod/v1
    description: Production Server
paths:
  /v1/students:
    get:
      tags:
        - Basics
      responses:
        '200':
          description: List of students
          content:
            application/json:
              schema:
                type: array
                minItems: 1
                maxItems: 100
                items:
                  type: string
                  description: name
                  minLength: 2
                  maxLength: 100
  /v1/customers:
    get:
      tags:
        - Basics
      responses:
        '200':
          description: List of customers
          content:
            application/json:
              schema:
                type: array
                minItems: 1
                maxItems: 100
                description: list of customers
                items:
                  type: object
                  description: customer object
                  properties:
                    id:
                      type: string
                      format: uuid
                    firstname:
                      type: string
                      minLength: 2
                      maxLength: 100
                      example: kaan
                    lastname:
                      type: string
                      minLength: 2
                      maxLength: 100
                    address:
                      type: object
                      properties:
                        line1:
                          type: string
                        city:
                          type: string
                        stateCode:
                          type: string
                          minLength: 2
                          maxLength: 2
                          description: 2 Letter State Code
                          #enum: [AL, AK, AZ, AR, CA]
                          enum:
                            - AL
                            - AK
                            - AZ
                            - AR 
                            - CA
                        zipcode:
                          type: string
                
        
#instead of using every time the address object, we can create a address component so that we can reuse it.The code would look like this:

  /v1/customersShort:
    get:
      tags:
        - Using Objects
      responses:
        '200':
          description: List of customers
          content:
            application/json:
              schema:
                type: array
                minItems: 1
                maxItems: 100
                description: list of customers
                items:
                  type: object
                  description: customer object
                  properties:
                    id:
                      type: string
                      format: uuid
                    firstname:
                      type: string
                      minLength: 2
                      maxLength: 100
                      example: kaan
                    lastname:
                      type: string
                      minLength: 2
                      maxLength: 100
                    address:
                      $ref: "#/components/schemas/Address"
  /v1/customersShorter:
    get:
      tags:
        - Using Objects
      responses:
        '200':
          description: List of customers
          content:
            application/json:
              schema:
                type: array
                minItems: 1
                maxItems: 100
                description: list of customers
                items:
                  $ref: "#/components/schemas/customer"                       
  /v1/customersShortest:
    get:
      tags:
        - Using Objects
      responses:
        '200':
          description: List of customers
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/customerList"

    # Using Parameters
    
  /v1/customerParameter:
   get:
    tags:
       - Using Parameter
    parameters:
       - name: pageNumber
         in: query
         description: Page Number
         schema:
           type: integer
           format: int32
           default: 1
       - name: pageSize
         in: query
         description: Page size
         required: false
         schema:
           type: integer
           format: int32
           default: 25    
    responses:
      '200':
        description: List of customers
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/customerList"

  # Using Parameters as components - 169
  # Using Tags  
  /v1/customerParameterComponents:
   get: 
    tags:
      - Using Parameters as components
    parameters:
      - $ref: "#/components/parameters/pageParameters"
    responses:
      '200':
        description: List of customers
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/customerList"

  # Using URL as Parameter
  # Using Summary and Description 195-196
  

  /v1/customerParameterURL:
   get:
    tags:
        - Using URL as Parameter
    operationId: listCustomersV1 #operation ID must be unique
    parameters:
      - $ref: "#/components/parameters/pageParameters"
    responses:
      '200':
        description: List of customers
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/customerList"
  
  /v1/customerParameterURL{customerId}: #this is a path parameter {}
    get:
      summary: List of Customers
      description: Get a List of **Customers** in the *System*
      tags:
        - Using URL as Parameter
        #- Customers
        #- Customers2  #it will be in customer and customer 2 tag
      operationId: getCustomerByIdV1
      parameters:
        - name: customerId
          in: path
          description: Customer Id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Found Customer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/customer"

  #USING POST OPERATION 240
  #USING HEADERS (Location) 254

  /v2/customerParameterURL:
   get:
    tags:
        - Using Post, Put, Delete Operations and Header
    operationId: listCustomersV1 #operation ID must be unique
    parameters:
      - $ref: "#/components/parameters/pageParameters"
    responses:
      '200':
        description: List of customers
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/customerList"
   post:
     summary: New Customer
     description: Create a new Customer
     tags:
       - Using Post, Put, Delete Operations and Header
     requestBody:
       required: true
       content:
         application/json:
           schema:
             $ref: "#/components/schemas/customer"
     responses:
       '201':
         description: Customer Created
         headers:
           Location:
             description: Location of the Created Customer
             schema:
               type: string
               format: uri
               example: http://example.com/v1/customers/{assignedIdValue}
       '400':
         description: Bad Request
       '409':
         description: Conflict
      
  /v2/customerParameterURL{customerId}: #this is a path parameter {}
    get:
      summary: Get Customer by Id
      description: Get single **Customers** by its Id Value
      tags:
        - Using Post, Put, Delete Operations and Header
      operationId: getCustomerByIdV1
      parameters: #we will make this parameter as component and use it below on the put operation 303
        - name: customerId
          in: path
          description: Customer Id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Found Customer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/customer"  
        '404':
          description: Not Found
    put: 
      summary: Update Customer
      description: Update Customer by ID
      tags:
        - Using Post, Put, Delete Operations and Header
      parameters:
        - $ref: "#/components/parameters/customerIdPathParam"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/customer"
      responses:
        '204':
          description: Customer Updated
        '400':
          description: Bad Request  
        '409':
          description: Conflict
    delete:
      summary: Delete a Customer by ID
      description: Delete a **Customer** by its Id Value
      tags:
        - Using Post, Put, Delete Operations and Header
      operationId: deleteCustomerV1
      parameters: #we will make this parameter as component and use it below on the put operation 303
        - $ref: "#/components/parameters/customerIdPathParam"
      responses:
        '200':
          description: Customer Delete
        '404':
          description: Not Found  

################ COMPONENTS #######################

components:
  schemas:
    Address:
      type: object
      properties:
        line1:
          type: string
        city:
          type: string
        stateCode:
          type: string
          minLength: 2
          maxLength: 2
          description: 2 Letter State Code
          #enum: [AL, AK, AZ, AR, CA]
          enum:
            - AL
            - AK
            - AZ
            - AR 
            - CA
        zipcode:
          type: string  
                        
# we could also make the "customer object" a component so we could reuse it. it is the same line as 115 address
    
    customer:
      type: object
      description: customer object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true # the id cant be seen on post operation
        firstname:
          type: string
          minLength: 2
          maxLength: 100
          example: kaan
        lastname:
          type: string
          minLength: 2
          maxLength: 100
        address:
          $ref: "#/components/schemas/Address"   

# we can make this even shorter by making the array a component       
    customerList:
      type: array
      minItems: 1
      maxItems: 100
      description: list of customers
      items:
        $ref: "#/components/schemas/customer" 


# we can also make paramaters as components for reuse
  parameters:
    pageParameters:
      name: pageNumber
      in: query
      description: Page Number
      schema:
        type: integer
        format: int32
        default: 1
    pageParameters2:
      name: pageNumber
      in: query
      description: Page Number
      schema:
        type: integer
        format: int32
        default: 1    
    customerIdPathParam:
      name: customerId
      in: path
      description: Customer Id
      required: true
      schema:
        type: string
        format: uuid

    